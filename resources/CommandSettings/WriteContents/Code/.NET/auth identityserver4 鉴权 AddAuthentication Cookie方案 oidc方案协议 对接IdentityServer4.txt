services.AddAuthentication(options =>
                {
                    //默认验证方案
                    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    //默认token验证失败后的确认验证结果方案; 这样Authorize特性标签就不需要参数: AuthenticationSchemes = "oidc"
                    options.DefaultChallengeScheme = AuthenticationConsts.OidcAuthenticationScheme;

                    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    options.DefaultForbidScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    options.DefaultSignOutScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                })
                .AddCookie(CookieAuthenticationDefaults.AuthenticationScheme,
                    options =>
                    {
                        //options.LoginPath = ""; // 认证失败跳转至登录地址
                        options.Cookie.Name = AuthenticationConsts.BpmClientIdentity;
                        // Issue: https://github.com/aspnet/Announcements/issues/318
                        options.Cookie.SameSite = (SameSiteMode)(-1);
                        //options.TicketDataFormat = new TicketDataFormat(new CookieTicketDataFormat());
                        //options.TicketDataFormat = new TicketDataFormat(new CustomCookieDataProtector());
                    })
                // Nuget:Microsoft.AspNetCore.Authentication.OpenIdConnect; 控制器的授权Scheme要指定"oidc": [Authorize(AuthenticationSchemes = "oidc")]
                .AddOpenIdConnect("oidc", options =>
                {
                    options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;

                    // 配置 IdentityServer4 的授权服务器地址
                    options.Authority = "https://my.oauthserver.com";

                    // 配置客户端 ID 和密钥
                    options.ClientId = "INTERNAL00000000ID";
                    options.ClientSecret = "INTERNAL-b5d5-7eba-1d182998574a";
                    options.ResponseType = "code id_token";

                    // PKCE
                    options.UsePkce = true;

                    // 配置回调路径
                    options.CallbackPath = "/signin-oidc";

                    // 配置要请求的身份资源和作用域
                    options.Scope.Add("openid");
                    options.Scope.Add("roles");
                    options.Scope.Add("profile");
                    options.Scope.Add("email");
                    options.Scope.Add("my.api");

                    // 配置要接收的用户声明
                    options.GetClaimsFromUserInfoEndpoint = true;

                    // 配置用于认证和授权的 Cookie 选项
                    options.SaveTokens = true;
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        NameClaimType = "name",
                        RoleClaimType = "role"
                    };

                    options.Events = new OpenIdConnectEvents
                    {
                        OnMessageReceived = OnMessageReceived,
                        OnRedirectToIdentityProvider = n => OnRedirectToIdentityProvider(n, opIdConnectOptions.RedirectUri),
                        OnTokenResponseReceived = n => OnTokenResponseReceived(n),
                        OnUserInformationReceived = n => OnUserInformationReceived(n)
                    };
                });


        private static Task OnRedirectToIdentityProvider(RedirectContext n, string redirectUri)
        {
            string scheme = n.Request.Headers["X-Forwarded-Proto"].ToString() ?? n.Request.Scheme;
            if (string.IsNullOrEmpty(scheme))
            {
                scheme = "http";
            }
            var host = $"{scheme}://{n.Request.Host.Value}";
            n.ProtocolMessage.RedirectUri = $"{host}/signin-oidc"; //redirectUri;
            n.ProtocolMessage.PostLogoutRedirectUri = $"{host}/signout-callback-oidc";

            if (n.HttpContext.Session.Get("sso_login_user") != null)
            {
                n.ProtocolMessage.AcrValues = "idp:Weixin"; //此处设置默认的第三方登录类型
            }
            return Task.FromResult(0);
        }
        private static Task OnMessageReceived(MessageReceivedContext context)
        {
            context.Properties.IsPersistent = false;
            //context.Properties.ExpiresUtc = new DateTimeOffset(DateTime.Now.AddHours(12));

            return Task.FromResult(0);
        }
        /// <summary>
        /// 成功获取用户信息
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        private static Task OnUserInformationReceived(UserInformationReceivedContext context)
        {
            if (context.User != null)
            {
                context.Options.ClaimActions.Clear();
                context.Options.ClaimActions.MapJsonKey("name", "UserAccount"); //给name单独映射
                context.Options.ClaimActions.MapCustomJson("userInfo", JsonClaimValueTypes.Json, user =>
                {
                    var cul = CultureInfo.CurrentCulture;
                    // 返回主要的用户信息
                    var dJson = user.GetRawText().FromJson<UserInfoDto>();
                    if (!cul.DisplayName.Contains("zh"))
                    {
                        string enName = user.GetString("UserEnName").ToString();
                        if (!string.IsNullOrEmpty(enName))
                        {
                            dJson.UserName = enName;
                        }
                    }
                    var d = dJson.ToJson();
                    return d;
                });
            }
            return Task.CompletedTask;
        }

        private static Task OnTokenResponseReceived(TokenResponseReceivedContext context)
        {
            context.HttpContext.Session.SetString("token", context.TokenEndpointResponse.AccessToken);
            //context.HttpContext.Response.HttpContext.Session.SetString("token", context.TokenEndpointResponse.AccessToken);
            return Task.CompletedTask;
        }